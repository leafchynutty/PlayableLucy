import flixel.tweens.FlxEase;
import funkin.modding.module.Module;
import funkin.modding.module.ModuleHandler;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import funkin.play.Countdown;
import funkin.play.CountdownStep;

class LucyCameraStartingPositions extends Module {
	var currentStage:Null<Stage>;

	var reset = false;

	public function new() {
		super("LucyCameraStartingPositions", {
			state: PlayState
		});
	}

	public function onCountdownStep(event:CountdownScriptEvent) {
		super.onCountdownStep(event);
		
		var songName = PlayState.instance.currentSong.songName;
		var songVariation = PlayState.instance.currentVariation;

		if (songName == "Bopeebo" && songVariation == "lucy")
		{
			if (event.step == CountdownStep.GO){
				setCameraPosition(currentStage.getDad().cameraFocusPoint.x, currentStage.getDad().cameraFocusPoint.y, 1.0, FlxEase.sineInOut);
				setCameraZoom(1.0, 1.0, FlxEase.sineInOut, false);
			}
		}
	}

	public function onSongRetry(event:SongRetryEvent) {
		super.onSongRetry(event);
		reset = true;
	}

	public function onCountdownStart(event:CountdownScriptEvent) {
		super.onCountdownStart(event);
		currentStage = null;

		if (PlayState.instance == null)
			return;

		currentStage = PlayState.instance.currentStage;

		var songName = PlayState.instance.currentSong.songName;
		var songVariation = PlayState.instance.currentVariation;
		trace(songName + "-" + songVariation);

		var gfPoint = null;
		var dadPoint = null;
		var bfPoint = null;

		if (currentStage.getGirlfriend() != null)
			gfPoint = currentStage.getGirlfriend().cameraFocusPoint;
		if (currentStage.getDad() != null)
			dadPoint = currentStage.getDad().cameraFocusPoint;
		if (currentStage.getBoyfriend() != null)
			bfPoint = currentStage.getBoyfriend().cameraFocusPoint;

		var cameraSetter = ModuleHandler.getModule("sscs-camera-setter-module");
		if (cameraSetter != null)
		{
			cameraSetter.SETTINGS = null;
		}

		if (songName == "Bopeebo" && songVariation == "lucy") {
			trace("Bopeebo (Lucy Mix)");
			if (bfPoint == null)
				return;

			if (cameraSetter == null) {
				setCameraPosition(bfPoint.x + 150, bfPoint.y, ((reset) ? 1 : 0), FlxEase.sineInOut);
				setCameraZoom(1.5, ((reset) ? 1 : 0), FlxEase.sineInOut, true);
			} else {
				cameraSetter.SETTINGS = {
					position: {
						x: bfPoint.x + 150,
						y: bfPoint.y,
						ease: FlxEase.sineInOut,
						time: ((reset) ? 1.0 : 0.0)
					},
					zoom: {
						zoom: 1.5,
						time: ((reset) ? 1.0 : 0.0),
						ease: FlxEase.sineInOut,
						direct: true
					}
				};
			}
		}

		if (reset == null || reset)
			reset = false;
	}

	function setCameraPosition(x:Float = 0, y:Float = 0, time:Float = 0, ease:FlxEase = FlxEase.linear) {
		PlayState.instance.tweenCameraToPosition((x ?? PlayState.instance.currentStage.getDad().cameraFocusPoint.x),
			(y ?? PlayState.instance.currentStage.getDad().cameraFocusPoint.y), time, (ease ?? FlxEase.linear));
	}

	function setCameraZoom(zoom:Float = 1, time:Float = 0, ease:FlxEase = FlxEase.linear, direct:Bool = true) {
		// direct == true: Set zoom directly.
		// direct == false: Set zoom as a multiplier of the current stage"s default zoom.

		PlayState.instance.tweenCameraZoom(zoom, time, direct, (ease ?? FlxEase.linear));
	}
}
